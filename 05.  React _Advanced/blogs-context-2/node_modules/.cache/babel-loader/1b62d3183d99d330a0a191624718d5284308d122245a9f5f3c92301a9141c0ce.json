{"ast":null,"code":"var _jsxFileName = \"/home/raushankumar/Desktop/Web-Development/ React _Advanced/blogs-context-2/src/context/AppContext.js\",\n  _s = $RefreshSig$();\nimport { createContext, useState } from \"react\";\nimport { baseUrl } from \"../baseUrl\";\nimport { useNavigate } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AppContext = /*#__PURE__*/createContext();\nexport default function AppContextProvider({\n  children\n}) {\n  _s();\n  const [posts, setPosts] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [page, setPage] = useState(1);\n  const [totalPages, setTotalPages] = useState(null);\n  const navigate = useNavigate();\n\n  // Fetch Blog Data\n  const fetchBlogPosts = async (page = 1, tag = null, category) => {\n    setLoading(true);\n    let url = `${baseUrl}get-blogs?page=${page}`;\n    try {\n      const res = await fetch(url);\n      const data = await res.json();\n      if (!data.posts || data.posts.length === 0) throw new Error(\"Something Went Wrong\");\n      console.log(\"Api Response\", data);\n      setPage(data.page);\n      setPosts(data.posts);\n      setTotalPages(data.totalPages);\n    } catch (error) {\n      console.log(\"Error in Fetching BlogPosts\", error);\n      setPage(1);\n      setPosts([]);\n      setTotalPages(null);\n    }\n    setLoading(false);\n  };\n\n  // Handle When Next and Previous button are clicked\n  const handlePageChange = page => {\n    navigate({\n      search: `?page=${page}`\n    });\n    setPage(page);\n  };\n  const value = {\n    posts,\n    setPosts,\n    loading,\n    setLoading,\n    page,\n    setPage,\n    totalPages,\n    setTotalPages,\n    fetchBlogPosts,\n    handlePageChange\n  };\n  return /*#__PURE__*/_jsxDEV(AppContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 10\n  }, this);\n}\n_s(AppContextProvider, \"q6TCIE7mwJt7LpLnggYnqjht3gM=\", false, function () {\n  return [useNavigate];\n});\n_c = AppContextProvider;\nvar _c;\n$RefreshReg$(_c, \"AppContextProvider\");","map":{"version":3,"names":["createContext","useState","baseUrl","useNavigate","jsxDEV","_jsxDEV","AppContext","AppContextProvider","children","_s","posts","setPosts","loading","setLoading","page","setPage","totalPages","setTotalPages","navigate","fetchBlogPosts","tag","category","url","res","fetch","data","json","length","Error","console","log","error","handlePageChange","search","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/raushankumar/Desktop/Web-Development/ React _Advanced/blogs-context-2/src/context/AppContext.js"],"sourcesContent":["import { createContext, useState } from \"react\";\nimport { baseUrl } from \"../baseUrl\";\nimport { useNavigate } from \"react-router-dom\";\n\nexport const AppContext = createContext();\n\nexport default function AppContextProvider({ children }) {\n  const [posts, setPosts] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [page, setPage] = useState(1);\n  const [totalPages, setTotalPages] = useState(null);\n  const navigate = useNavigate();\n\n  // Fetch Blog Data\n  const fetchBlogPosts = async (page = 1, tag = null, category) => {\n    setLoading(true);\n       let url= `${baseUrl}get-blogs?page=${page}`\n    try {\n      const res = await fetch(url);\n      const data = await res.json();\n      if (!data.posts || data.posts.length === 0)\n        throw new Error(\"Something Went Wrong\");\n      console.log(\"Api Response\", data);\n      setPage(data.page);\n      setPosts(data.posts);\n      setTotalPages(data.totalPages);\n    } catch (error) {\n      console.log(\"Error in Fetching BlogPosts\", error);\n      setPage(1);\n      setPosts([]);\n      setTotalPages(null);\n    }\n    setLoading(false);\n  };\n\n  // Handle When Next and Previous button are clicked\n  const handlePageChange = (page) => {\n    navigate({search : `?page=${page}`});\n    setPage(page);\n\n  };\n\n  const value = {\n    posts,\n    setPosts,\n    loading,\n    setLoading,\n    page,\n    setPage,\n    totalPages,\n    setTotalPages,\n    fetchBlogPosts,\n    handlePageChange,\n  };\n\n  return <AppContext.Provider value={value}>{children}</AppContext.Provider>;\n}\n"],"mappings":";;AAAA,SAASA,aAAa,EAAEC,QAAQ,QAAQ,OAAO;AAC/C,SAASC,OAAO,QAAQ,YAAY;AACpC,SAASC,WAAW,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE/C,OAAO,MAAMC,UAAU,gBAAGN,aAAa,CAAC,CAAC;AAEzC,eAAe,SAASO,kBAAkBA,CAAC;EAAEC;AAAS,CAAC,EAAE;EAAAC,EAAA;EACvD,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACW,OAAO,EAAEC,UAAU,CAAC,GAAGZ,QAAQ,CAAC,KAAK,CAAC;EAC7C,MAAM,CAACa,IAAI,EAAEC,OAAO,CAAC,GAAGd,QAAQ,CAAC,CAAC,CAAC;EACnC,MAAM,CAACe,UAAU,EAAEC,aAAa,CAAC,GAAGhB,QAAQ,CAAC,IAAI,CAAC;EAClD,MAAMiB,QAAQ,GAAGf,WAAW,CAAC,CAAC;;EAE9B;EACA,MAAMgB,cAAc,GAAG,MAAAA,CAAOL,IAAI,GAAG,CAAC,EAAEM,GAAG,GAAG,IAAI,EAAEC,QAAQ,KAAK;IAC/DR,UAAU,CAAC,IAAI,CAAC;IACb,IAAIS,GAAG,GAAE,GAAGpB,OAAO,kBAAkBY,IAAI,EAAE;IAC9C,IAAI;MACF,MAAMS,GAAG,GAAG,MAAMC,KAAK,CAACF,GAAG,CAAC;MAC5B,MAAMG,IAAI,GAAG,MAAMF,GAAG,CAACG,IAAI,CAAC,CAAC;MAC7B,IAAI,CAACD,IAAI,CAACf,KAAK,IAAIe,IAAI,CAACf,KAAK,CAACiB,MAAM,KAAK,CAAC,EACxC,MAAM,IAAIC,KAAK,CAAC,sBAAsB,CAAC;MACzCC,OAAO,CAACC,GAAG,CAAC,cAAc,EAAEL,IAAI,CAAC;MACjCV,OAAO,CAACU,IAAI,CAACX,IAAI,CAAC;MAClBH,QAAQ,CAACc,IAAI,CAACf,KAAK,CAAC;MACpBO,aAAa,CAACQ,IAAI,CAACT,UAAU,CAAC;IAChC,CAAC,CAAC,OAAOe,KAAK,EAAE;MACdF,OAAO,CAACC,GAAG,CAAC,6BAA6B,EAAEC,KAAK,CAAC;MACjDhB,OAAO,CAAC,CAAC,CAAC;MACVJ,QAAQ,CAAC,EAAE,CAAC;MACZM,aAAa,CAAC,IAAI,CAAC;IACrB;IACAJ,UAAU,CAAC,KAAK,CAAC;EACnB,CAAC;;EAED;EACA,MAAMmB,gBAAgB,GAAIlB,IAAI,IAAK;IACjCI,QAAQ,CAAC;MAACe,MAAM,EAAG,SAASnB,IAAI;IAAE,CAAC,CAAC;IACpCC,OAAO,CAACD,IAAI,CAAC;EAEf,CAAC;EAED,MAAMoB,KAAK,GAAG;IACZxB,KAAK;IACLC,QAAQ;IACRC,OAAO;IACPC,UAAU;IACVC,IAAI;IACJC,OAAO;IACPC,UAAU;IACVC,aAAa;IACbE,cAAc;IACda;EACF,CAAC;EAED,oBAAO3B,OAAA,CAACC,UAAU,CAAC6B,QAAQ;IAACD,KAAK,EAAEA,KAAM;IAAA1B,QAAA,EAAEA;EAAQ;IAAA4B,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAsB,CAAC;AAC5E;AAAC9B,EAAA,CAlDuBF,kBAAkB;EAAA,QAKvBJ,WAAW;AAAA;AAAAqC,EAAA,GALNjC,kBAAkB;AAAA,IAAAiC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}